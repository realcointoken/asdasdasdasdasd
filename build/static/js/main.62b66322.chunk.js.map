{"version":3,"sources":["../node_modules/express/lib sync","components/WalletConnect.js","components/ThemeButton.jsx","img/redfloki.svg","img/Telegram.svg","img/Twitter.svg","img/Instagram.svg","components/actions/convert.js","components/BridgeDashboard.jsx","img/logo.svg","components/ContactUs.jsx","components/Footer.jsx","components/LandingPage.jsx","components/Navbar.jsx","getLibrary.js","components/Connectors.js","App.js","reportWebVitals.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","web3Modal","provider","providerOptions","Button","props","className","loading","disabled","onClick","name","getweb3","a","metamask","type","check","walletconnect","package","WalletConnectProvider","options","infuraId","network","qrcodeModalOptions","mobileLinks","Web3Modal","cacheProvider","connect","localStorage","setItem","Web3","eth","getAccounts","then","res","console","log","on","error","close","clear","web3","bounce","cssTransition","enter","exit","ethToBscRequest","account","value","signature","hash","toast","transition","postdata","amount","axios","post","dismiss","success","data","catch","err","response","step","message","delay","bscToEthRequest","EthTokenAddress","abi_config","eth_token","BscTokenAddress","bsc_token","BridgeDashboard","getItem","storedAccount","useState","setAccount","setValue","processing","setProcessing","setProvider","givenProvider","ethContract","Contract","EthTokenAbi","bscContract","BscTokenAbi","ethBridgeAddress","eth_bridge","bscBridgeAddress","bsc_bridge","currentNetworks","setCurrentNetworks","updateCurrentNetworks","isEth","window","ethereum","networkVersion","isBsc","warning","isConditionOk","net_flag","selectedAddress","EthToBsc","methods","transfer","ethers","BigNumber","from","String","send","personal","sign","utils","sha3","BscToEth","useEffect","accounts","networkId","open","min","placeholder","onChange","target","ContactUs","alt","src","logo","href","Footer","LandingPage","locate","url","location","assign","telegram","twitter","instagram","floki","Navbar","setWeb3","isWalletConnected","currentAccount","connectState","setConnecState","undefined","getLibrary","Web3Provider","InjectedConnector","Connectors","NetworkOnlyConnector","connectors","MetaMask","supportedNetworks","Infura","providerURL","App","libraryName","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62b66322.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 1124;","import React, { setState, useState } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport Web3Modal from \"web3modal\";\r\nimport Authereum from \"authereum\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\n\r\nvar web3Modal;\r\nvar provider;\r\nvar providerOptions;\r\nvar defaultAccount;\r\n\r\nconst getweb3 = async () => {\r\n    providerOptions = {\r\n        metamask: {\r\n            id: \"injected\",\r\n            name: \"MetaMask\",\r\n            type: \"injected\",\r\n            check: \"isMetaMask\",\r\n        },\r\n        walletconnect: {\r\n            package: WalletConnectProvider,\r\n            options: {\r\n                infuraId: \"INFURA_ID\",\r\n                network: \"mainnet\",\r\n                qrcodeModalOptions: {\r\n                    mobileLinks: [\r\n                        \"rainbow\",\r\n                        \"metamask\",\r\n                        \"argent\",\r\n                        \"trust\",\r\n                        \"imtoken\",\r\n                        \"pillar\",\r\n                    ],\r\n                },\r\n            },\r\n        },\r\n    };\r\n\r\n    web3Modal = new Web3Modal({\r\n        network: \"mainnet\",\r\n        cacheProvider: false,\r\n        providerOptions,\r\n    });\r\n\r\n    provider = await web3Modal.connect();\r\n\r\n    localStorage.setItem('isWalletConnected', true);\r\n\r\n    new Web3(provider).eth.getAccounts().then((res) => {\r\n        defaultAccount = res[0];\r\n        console.log(\"Got Account\" + res[0]);\r\n        localStorage.setItem('currentAccount', res[0]);\r\n    })\r\n\r\n    provider.on(\"error\", (e) => console.error(\"WS ERROR\", e));\r\n    provider.on(\"end\", (e) => console.error(\"WE END\", e));\r\n\r\n    provider.on(\"disconnect\", (e) => console.log(e));\r\n    provider.on(\"connect\", (e) => console.log(e));\r\n};\r\n\r\nexport const close = async () => {\r\n    provider = null;\r\n    localStorage.clear();\r\n}\r\n\r\nexport var web3 = new Web3(provider);\r\n\r\nexport var account = defaultAccount;\r\n\r\nexport default getweb3;","import React from \"react\";\r\nimport \"../styles/button.css\";\r\n\r\nconst Button = (props) => {\r\n  return (\r\n    <div className=\"flex\">\r\n      {!props.loading ? (\r\n        <button className=\"btn\" onClick={props.onClick}>\r\n          {props.name}\r\n        </button>\r\n      ) : (\r\n        <button className=\"btn btn-disabled\" disabled>\r\n          <div className=\"_loader\">\r\n            <span className=\"let1\">c</span>\r\n            <span className=\"let2\">o</span>\r\n            <span className=\"let3\">n</span>\r\n            <span className=\"let4\">v</span>\r\n            <span className=\"let5\">e</span>\r\n            <span className=\"let6\">r</span>\r\n            <span className=\"let7\">t</span>\r\n            <span className=\"let8\">i</span>\r\n            <span className=\"let9\">n</span>\r\n            <span className=\"let10\">g</span>\r\n            <span className=\"let11\">.</span>\r\n            <span className=\"let12\">.</span>\r\n            <span className=\"let13\">.</span>\r\n          </div>\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","export default __webpack_public_path__ + \"static/media/redfloki.53659313.svg\";","export default __webpack_public_path__ + \"static/media/Telegram.b8b437ff.svg\";","export default __webpack_public_path__ + \"static/media/Twitter.36331815.svg\";","export default __webpack_public_path__ + \"static/media/Instagram.80807d62.svg\";","import axios from 'axios';\r\nimport \"animate.css/animate.min.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { toast, cssTransition } from \"react-toastify\";\r\n\r\nconst bounce = cssTransition({\r\n    enter: \"animate__animated animate__bounceIn\",\r\n    exit: \"animate__animated animate__bounceOut\"\r\n});\r\n\r\nexport const ethToBscRequest = async (account, value, signature, hash) => {\r\n    toast.loading(\"Wait please.\\nServer is processing your request.\", {\r\n        transition: bounce\r\n    });\r\n    const postdata = {\r\n        account: account,\r\n        amount: value,\r\n        signature: signature,\r\n        hash: hash\r\n    };\r\n    await axios\r\n        .post(`/api/bridge/eth2bsc`, postdata)\r\n        .then(e => {\r\n            console.log(e);\r\n            toast.dismiss();\r\n            toast.success(e.data, {\r\n                transition: bounce\r\n            })\r\n        })\r\n        .catch(err => {\r\n            toast.dismiss()\r\n            var error = err.response.data;\r\n            if (error.step) {\r\n                toast.error(error.message, {\r\n                    transition: bounce,\r\n                    delay: 8\r\n                })\r\n                return;\r\n            }\r\n            toast.error(\"Server is not working. \\n Check your network connection.\", {\r\n                transition: bounce\r\n            })\r\n            console.log(err)\r\n        });\r\n}\r\n\r\nexport const bscToEthRequest = async (account, value, signature, hash) => {\r\n    toast.loading(\"Wait please.\\nServer is processing your request.\", {\r\n        transition: bounce\r\n    });\r\n\r\n    const postdata = {\r\n        account: account,\r\n        amount: value,\r\n        signature: signature,\r\n        hash: hash\r\n    };\r\n\r\n    await axios\r\n        .post(`/api/bridge/bsc2eth`, postdata)\r\n        .then(e => {\r\n            console.log(e);\r\n            toast.dismiss();\r\n            toast.success(e.data, {\r\n                transition: bounce,\r\n                delay: 8\r\n            })\r\n        })\r\n        .catch(err => {\r\n            toast.dismiss()\r\n            var error = err.response.data;\r\n            if (error.step) {\r\n                toast.error(error.message, {\r\n                    transition: bounce\r\n                })\r\n                return;\r\n            }\r\n            toast.error(\"Server is not working. \\n Check your network connection.\", {\r\n                transition: bounce\r\n            })\r\n            console.log(err);\r\n        });\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport Button from \"./ThemeButton\";\r\nimport { web3, account } from \"./WalletConnect\";\r\nimport { Contract } from \"@ethersproject/contracts\";\r\nimport { ethers } from \"ethers\";\r\nimport { ToastContainer, toast, cssTransition } from \"react-toastify\";\r\nimport abi_config from \"./contract/config.json\";\r\nimport EthTokenAbi from \"./contract/EthToken.json\";\r\nimport BscTokenAbi from \"./contract/BscToken.json\";\r\nimport \"animate.css/animate.min.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport { ethToBscRequest, bscToEthRequest } from \"./actions/convert\";\r\nimport { set } from \"express/lib/application\";\r\n\r\nconst EthTokenAddress = abi_config.eth_token;\r\nconst BscTokenAddress = abi_config.bsc_token;\r\n\r\nconst BridgeDashboard = () => {\r\n  const connectState = localStorage.getItem(\"isWalletConnected\");\r\n  const storedAccount = localStorage.getItem(\"currentAccount\");\r\n  const [account, setAccount] = useState(storedAccount);\r\n  const [ethBalance, setEthBalance] = useState(0);\r\n  const [bscBalance, setBscBalance] = useState(0);\r\n  const [value, setValue] = useState(0);\r\n  const [processing, setProcessing] = useState(false);\r\n  web3.eth.setProvider(web3.givenProvider);\r\n  const ethContract = new web3.eth.Contract(EthTokenAbi, EthTokenAddress);\r\n  const bscContract = new web3.eth.Contract(BscTokenAbi, BscTokenAddress);\r\n\r\n  const ethBridgeAddress = abi_config.eth_bridge;\r\n  const bscBridgeAddress = abi_config.bsc_bridge;\r\n\r\n  const [currentNetworks, setCurrentNetworks] = useState({});\r\n\r\n  const bounce = cssTransition({\r\n    enter: \"animate__animated animate__bounceIn\",\r\n    exit: \"animate__animated animate__bounceOut\",\r\n  });\r\n\r\n  const updateCurrentNetworks = () => {\r\n    try {\r\n      setCurrentNetworks({\r\n        isEth: window.ethereum.networkVersion == 1 || window.ethereum.networkVersion == 4,\r\n        isBsc: window.ethereum.networkVersion == 56 || window.ethereum.networkVersion == 97\r\n      });\r\n    } catch(e) {\r\n      toast.warning(\"Please install Metamask2.\", {\r\n        transition: bounce,\r\n      });\r\n    }\r\n  }\r\n\r\n  const isConditionOk = (net_flag) => {\r\n    if (\r\n      !localStorage.getItem(\"isWalletConnected\") ||\r\n      !localStorage.getItem(\"currentAccount\")\r\n    ) {\r\n      toast.warning(\"Please connect your wallet!\", {\r\n        transition: bounce,\r\n      });\r\n      return false;\r\n    }\r\n\r\n    if(window.ethereum.selectedAddress == null) {\r\n      toast.warning(\"Unlock your wallet and connect to it.\", {\r\n        transition: bounce,\r\n      });\r\n      return false;\r\n    }\r\n\r\n    if(net_flag == 1 && !currentNetworks.isEth){\r\n      toast.warning(\"Switch network to Ethereum.\", {\r\n        transition: bounce,\r\n      });\r\n      return false;\r\n    }\r\n    if(net_flag == 2 && !currentNetworks.isBsc) {\r\n      toast.warning(\"Switch network to Binance.\", {\r\n        transition: bounce,\r\n      });\r\n      return false;\r\n    }\r\n\r\n    if (value <= 0 || !value) {\r\n      toast.error(\"Please input valid number!\", {\r\n        transition: bounce,\r\n      });\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  const EthToBsc = async () => {\r\n    if(!isConditionOk(1)) return false;\r\n    //Sign message...\r\n    const account = localStorage.getItem(\"currentAccount\");\r\n\r\n    await ethContract.methods.transfer(ethBridgeAddress, ethers.BigNumber.from(String(value * (10 ** 18)))).send({from: account}).on('receipt', async () => {\r\n        await web3.eth.personal\r\n        .sign(web3.utils.sha3(`Sign with amount: ${value}`), account)\r\n          .then(async (e) => {\r\n            console.log(`${value} ETHFloki sent to convert`);\r\n            setProcessing(true);\r\n            await ethToBscRequest(\r\n              account,\r\n              value,\r\n              e,\r\n              web3.utils.sha3(`Sign with amount: ${value}`)\r\n            );\r\n            setProcessing(false);\r\n          });\r\n      }); \r\n    }\r\n  const BscToEth = async () => {\r\n    if(!isConditionOk(2)) return false;\r\n    //Sign message...\r\n    const account = localStorage.getItem(\"currentAccount\");\r\n\r\n    await bscContract.methods.transfer(bscBridgeAddress, ethers.BigNumber.from(String(value * (10 ** 18)))).send({from: account}).on('receipt', async () => {\r\n      await web3.eth.personal\r\n      .sign(web3.utils.sha3(`Sign with amount: ${value}`), account)\r\n        .then(async (e) => {\r\n          console.log(`${value} BSCFloki sent to convert`);\r\n          setProcessing(true);\r\n          await bscToEthRequest(\r\n            account,\r\n            value,\r\n            e,\r\n            web3.utils.sha3(`Sign with amount: ${value}`)\r\n          );\r\n          setProcessing(false);\r\n      });\r\n    });\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if(!window.ethereum) {\r\n      toast.warning(\"Click here to install Metamask.\", {\r\n        transition: bounce,\r\n        onClick: () => window.open(\"https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=en\", \"_blink\", \"width=700, height=600, location=no, toolbar=no, menubar=no\")\r\n      });\r\n      return;\r\n    }\r\n\r\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n      setAccount(accounts[0]);\r\n      localStorage.setItem(\"currentAccount\", accounts[0]);\r\n      toast.warning(\"You changed your account.\", {\r\n        transition: bounce,\r\n      });\r\n      updateCurrentNetworks();\r\n    });\r\n\r\n    window.ethereum.on(\"networkChanged\", (networkId) => {\r\n      console.log(networkId);\r\n      localStorage.setItem(\"currentNetwork\", networkId);\r\n      toast.warning(\"You changed network.\", {\r\n        transition: bounce,\r\n      });\r\n      updateCurrentNetworks();\r\n    });\r\n\r\n    updateCurrentNetworks();\r\n  }, []);\r\n  return (\r\n    <div className=\"bridge-dashboard\">\r\n      <div className=\"dashboard flex col\">\r\n        <h2 className=\"flex\">Input the value you wish to convert.</h2>\r\n        <div className=\"input-area flex\">\r\n          <input\r\n            type=\"number\"\r\n            min={1}\r\n            className=\"theme-input\"\r\n            placeholder=\"Input value here...\"\r\n            value={value}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"separator flex col\">\r\n        <div className=\"hr\"> </div>\r\n      </div>\r\n      <div className=\"eth-to-bnb flex col\">\r\n        <h2 className=\"flex\">Move your Red Floki from Ethereum to Binance</h2>\r\n        <div className=\"button-area flex\">\r\n          <Button\r\n            name=\"Click here and convert ETH to BSC\"\r\n            loading={processing}\r\n            onClick={EthToBsc}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"separator flex col\">\r\n        <div className=\"hr\"> </div>\r\n      </div>\r\n      <div className=\"bnb-to-eth flex col\">\r\n        <h2 className=\"flex\">Move your Red Floki from Binance to Ethereum</h2>\r\n        <div className=\"button-area flex\">\r\n          <Button\r\n            name=\"Click here and convert BSC to ETH\"\r\n            loading={processing}\r\n            onClick={BscToEth}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BridgeDashboard;\r\n","export default __webpack_public_path__ + \"static/media/logo.5137f794.svg\";","import React from \"react\";\r\nimport logo from \"../img/logo.svg\";\r\n\r\nconst ContactUs = () => {\r\n  return (\r\n    <div className=\"footer flex col\">\r\n      <div className=\"contact-us flex\">\r\n        <div className=\"about-redfloki flex col\">\r\n          <div className=\"flex\">\r\n            <img alt=\"Red Floki\" src={logo} />\r\n          </div>\r\n          <div className=\"flex\">\r\n            <p className=\"sub-text\">\r\n              Red Floki is a Deflationary Token That Charges Tx Fees On\r\n              Everything But Buys. The Fees Charged On All Non-Buy Transactions\r\n              Help Reward And Protect All HOLDRs.\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"community flex col\">\r\n          <h3 className=\"h3 red flex\">Community</h3>\r\n          <p className=\"social-link flex\">\r\n            <a\r\n              className=\"flex\"\r\n              href=\"https://twitter.com/Red_Floki\"\r\n              target=\"_blank\"\r\n            >\r\n              Twitter\r\n            </a>\r\n          </p>\r\n          <p className=\"social-link flex\">\r\n            <a\r\n              className=\"flex\"\r\n              href=\"https://www.instagram.com/Red_Floki/\"\r\n              target=\"_blank\"\r\n            >\r\n              Intagram\r\n            </a>\r\n          </p>\r\n          <p className=\"social-link flex\">\r\n            <a className=\"flex\" href=\"https://t.me/Red_Floki\" target=\"_blank\">\r\n              Telegram\r\n            </a>\r\n          </p>\r\n        </div>\r\n        <div className=\"resource flex col\">\r\n          <h3 className=\"h3 red flex\">Recources</h3>\r\n          <p className=\"social-link flex\">\r\n            <a\r\n              className=\"flex\"\r\n              href=\"https://poocoin.app/tokens/0x2a3e1d095f2902c9b6da1bff7813a7b2fc65c3da\"\r\n              target=\"_blank\"\r\n            >\r\n              Chart\r\n            </a>\r\n          </p>\r\n          <p className=\"social-link flex\">\r\n            <a\r\n              className=\"flex\"\r\n              href=\"https://bscscan.com/token/0x2A3E1D095F2902C9B6Da1bFF7813a7B2fc65C3dA\"\r\n              target=\"_blank\"\r\n            >\r\n              Contract\r\n            </a>\r\n          </p>\r\n          <p className=\"social-link flex\">\r\n            <a\r\n              className=\"flex\"\r\n              href=\"https://redfloki.com/Red-Floki-Audit.pdf\"\r\n              target=\"_blank\"\r\n            >\r\n              Security Audit\r\n            </a>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactUs;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"footer-bottom flex\">\r\n      <p>Copyright &copy; 2021 Red Floki. All Rights Reserved.</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport Button from \"./ThemeButton\";\r\nimport \"../styles/button.css\";\r\nimport floki from \"../img/redfloki.svg\";\r\nimport telegram from \"../img/Telegram.svg\";\r\nimport twitter from \"../img/Twitter.svg\";\r\nimport instagram from \"../img/Instagram.svg\";\r\nimport BridgeDashboard from \"./BridgeDashboard\";\r\nimport ContactUs from \"./ContactUs\";\r\nimport Footer from \"./Footer\";\r\n\r\nconst LandingPage = () => {\r\n  const locate = (url) => {\r\n    window.location.assign(url);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* <Particle params={particlesConfig} className=\"App-particles__container\" /> */}\r\n      <div className=\"landing-page flex col\">\r\n        <div className=\"main-stack-color bridge-header flex row\">\r\n          <div className=\"bridge-workspace flex col\">\r\n            <div className=\"title-banner flex col\">\r\n              <h1 className=\"h1 flex\">Ethereum - Binance Smart Chain Bridge</h1>\r\n            </div>\r\n            <div className=\"description flex\">\r\n              <p className=\"text flex\">\r\n                Red Floki is a Deflationary Token That Charges Tx Fees On\r\n                Everything But Buys. The Fees Charged On All Non-Buy\r\n                Transactions Help Reward And Protect All HOLDRs.\r\n              </p>\r\n            </div>\r\n            <div className=\"button-area flex\">\r\n              <Button\r\n                name=\"Check Bscscan\"\r\n                onClick={() =>\r\n                  locate(\r\n                    \"https://bscscan.com/token/0x2A3E1D095F2902C9B6Da1bFF7813a7B2fc65C3dA\"\r\n                  )\r\n                }\r\n              />\r\n              <Button\r\n                name=\"Chart\"\r\n                onClick={() =>\r\n                  locate(\r\n                    \"https://poocoin.app/tokens/0x2a3e1d095f2902c9b6da1bff7813a7b2fc65c3da\"\r\n                  )\r\n                }\r\n              />\r\n            </div>\r\n            <div className=\"social-area flex\">\r\n              <div className=\"telegram flex\">\r\n                <a href=\"https://t.me/Red_Floki\" target=\"_blank\">\r\n                  <img alt=\"Telegram\" src={telegram} />\r\n                </a>\r\n              </div>\r\n              <div className=\"twitter flex\">\r\n                <a href=\"https://twitter.com/Red_Floki\" target=\"_blank\">\r\n                  <img alt=\"Twitter\" src={twitter} />\r\n                </a>\r\n              </div>\r\n              <div className=\"instagram flex\">\r\n                <a href=\"https://t.me/Red_Floki\" target=\"_blank\">\r\n                  <img alt=\"Instagram\" src={instagram} />\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"floki-wallpaper flex\">\r\n            <img\r\n              alt=\"Red Floki\"\r\n              className=\"redfloki-main-character\"\r\n              src={floki}\r\n            />\r\n          </div>\r\n        </div>\r\n        {/* <div className=\"adfloki flex\">\r\n          <img className=\"adfloki-character\" src={adfloki} />\r\n        </div> */}\r\n      </div>\r\n      <div className=\"dashboard-section flex\">\r\n        <div className=\"landing-page flex\">\r\n          <BridgeDashboard />\r\n        </div>\r\n      </div>\r\n      <ContactUs />\r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LandingPage;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Button from \"./ThemeButton\";\r\nimport logo from \"../img/logo.svg\";\r\nimport Web3 from \"web3\";\r\nimport Web3Modal from \"web3modal\";\r\nimport Authereum from \"authereum\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport { ToastContainer, toast, cssTransition } from \"react-toastify\";\r\nimport { close } from \"./WalletConnect\";\r\nimport getweb3 from \"./WalletConnect\";\r\n\r\nimport \"animate.css/animate.min.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst Navbar = () => {\r\n  const [web3, setWeb3] = useState(null);\r\n  const isWalletConnected = localStorage.getItem(\"isWalletConnected\");\r\n  const currentAccount = localStorage.getItem(\"currentAccount\");\r\n  const [connectState, setConnecState] = useState(\r\n    isWalletConnected && currentAccount\r\n  );\r\n\r\n  const bounce = cssTransition({\r\n    enter: \"animate__animated animate__bounceIn\",\r\n    exit: \"animate__animated animate__bounceOut\",\r\n  });\r\n\r\n  const connect = async () => {\r\n    if (!connectState && (!currentAccount || currentAccount == undefined)) {\r\n      setWeb3(getweb3);\r\n      setConnecState(true);\r\n    } else {\r\n      close();\r\n      setConnecState(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    try{\r\n      if(window.ethereum.selectedAddress == null) {\r\n        toast.warning(\"Unlock your wallet and connect to it.\", {\r\n          transition: bounce,\r\n        });\r\n        close();\r\n        setConnecState(false);\r\n      }\r\n    }catch (e) {\r\n      toast.warning(\"Click here to install Metamask.\", {\r\n        transition: bounce,\r\n        onClick: () => window.open(\"https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=en\", \"_blink\", \"width=700, height=600, location=no, toolbar=no, menubar=no\")\r\n      });\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"header flex\">\r\n      <div className=\"header-content flex\">\r\n        <div className=\"logo-container flex\">\r\n          <img alt=\"Red Floki\" className=\"logo flex\" src={logo} />\r\n        </div>\r\n        <div className=\"button-area flex\">\r\n          <Button\r\n            name={connectState ? \"Disconnect\" : \"Connect Wallet\"}\r\n            onClick={connect}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import { ExternalProvider, JsonRpcFetchFunc } from \"@ethersproject/providers\";\r\nimport { Web3Provider } from \"@ethersproject/providers\";\r\n\r\nconst getLibrary = (provider) => {\r\n    return new Web3Provider(provider);\r\n}\r\n\r\nexport default getLibrary;","import { Connectors } from \"web3-react\";\r\n\r\nconst { InjectedConnector, NetworkOnlyConnector } = Connectors;\r\n\r\nconst MetaMask = new InjectedConnector({ supportedNetworks: [1, 4, 56, 97] });\r\n\r\nconst Infura = new NetworkOnlyConnector({\r\n    providerURL: \"https://rinkeby.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161\",\r\n});\r\n\r\nconst connectors = { MetaMask, Infura };\r\nexport default connectors;","import './App.css';\nimport './Responsive.App.css';\nimport LandingPage from './components/LandingPage';\nimport Navbar from \"./components/Navbar\";\nimport { Web3ReactProvider } from \"@web3-react/core\";\nimport { ToastContainer, cssTransition } from 'react-toastify';\nimport getLibrary from './getLibrary';\nimport connectors from './components/Connectors';\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst App = () => {\n\n  const bounce = cssTransition({\n    enter: \"animate__animated animate__bounceIn\",\n    exit: \"animate__animated animate__bounceOut\"\n  });\n\n  return (\n    <Web3ReactProvider connectors={connectors} getLibrary={getLibrary} libraryName={'ethers.js' | 'web3.js' | null}>\n      <div className=\"App flex col\">\n        <Navbar />\n        <LandingPage />\n      </div>\n      <ToastContainer transition={bounce} />\n    </Web3ReactProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}